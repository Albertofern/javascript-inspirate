# Capítulo 9 - Obxectos

{:: encoding="utf-8" /}
{footnotes-off}

## *[Obxectos Literais](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)*

Xunto coas funcións, das que falaremos no próximo capítulo, os obxectos son a chave pra dominar o JavaScript de hoxe.

I> **Pero antes de nada aclaremos un concepto básico:**
I>
I> Non é necesario saber *[programación orientada a obxectos](https://es.wikipedia.
I> org/wiki/Programaci%C3%B3n_orientada_a_objetos)*, pra traballar con obxectos.

De feito ata a chegada de ECMAScript 6 non había algo como *[Class](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Classes)*, xa que en JavaScript este paradigma faise doutra forma, gracias a *[Protoype](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/prototype)*.

W> Pero... ¡non vos oprimades! con saber que non estamos facendo *[Programación Orientada a Obxectos
W> (POO)](https://es.wikipedia.org/wiki/Programaci%C3%B3n_orientada_a_objetos)*
W> válenos.

Vamos a traballar con *[Obxectos (Obxectos literais)](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object)*, basicamente son como arrays, no sentido que son unha variable especial que permítenos almacenar moitas cousas dentro de se mesma.

A diferenza dos arrays, aquí as cousas teñen nome (propiedades) e en caso de almacenar unha función dentro do obxecto recibirá o nome do *Método*, anque sexa exactamente igual que unha función normal.

A forma de almacenar datos dentro de obxectos, ten moita relevancia, é por iso a maioría de servizos web baseados en *[API REST](http://www.desarrolloweb.com/articulos/que-es-rest-caracteristicas-sistemas.html)*, dan soporte ao formato de intercambio de datos *[JSON (JavaScript Object Notation)](https://es.wikipedia.org/wiki/JSON)*.

JSON basicamente é un obxecto dos que veremos a continuación, pero que foi serializado de tal forma que é unha cadea de texto, que pode ser parseada de volta. Esta forma de traballar é claramente máis fácil que o clásico e obsoleto XML, pra o intercambio de datos cliente-servidor no contexto do desenvolvemento web.

{pagebreak}

## Manexo

- **Creando un obxecto**

    Baleiro:

    {lang=js}
    ~~~~~~~
    var meuObxecto = {};
    ~~~~~~~

    Con propiedades:

    {lang=js}
    ~~~~~~~
    var meuObxecto = {
	    cadea: 'isto é unha cadea',
	    numero: 2,
	    booleano: false
	};
    ~~~~~~~

    Con Métodos:

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	    saudar: function(){
			console.log("ola!");
		}
	};
    ~~~~~~~

- **Usando as propiedades e métodos**

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  metodo: function() {
	  	console.log(meuObxecto.propiedade1)
	  },
	  propiedade1: "Datos"
	};

	// Recuperando o valor de propiedade1
	console.log("meuObxecto.propiedade1:", meuObxecto.propiedade1);

	// Executando o método
	meuObxecto.metodo()
    ~~~~~~~

{pagebreak}

- **Cambiar un valor dunha propiedade**

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  propiedade1: "Datos"
	};

	meuObxecto.propiedade1 = 123456789;

	console.log(meuObxecto.propiedade1);
    ~~~~~~~

- **Borrando elementos**

    Utilizaremos o controvertido operador *[delete](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/delete)*. Recoméndoche *[esta lectura](http://perfectionkills.com/understanding-delete/)*, pra mellorar a túa comprensión acerca deste operador.

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  propiedade1: "Datos",
	  borrame: "Quero ser borrado"
	};

	console.log(meuObxecto.borrame);

	delete meuObxecto.borrame;

	console.log(meuObxecto.borrame);
    ~~~~~~~

## Métodos

Facemos unha recopilación simplificada dos métodos máis utilizados, anque existen moitos máis.

- ***[.defineProperties()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/defineProperties)***

	Define novas propiedades ou modifica as existentes directamente no obxecto, retornando o obxecto modificado.

  I> Realmente permítenos levar os nosos obxectos mucho más alá. Non obstante transcende dos
  I> nosos obxectivos, pero é un bo punto de partida.
  I>
  I> *[Máis información](http://stackoverflow.com/a/18557503)...*

    {lang=js}
    ~~~~~~~
    var meuObxecto = {propiedad: "Propiedad original..."}
	Object.defineProperties(meuObxecto, {
	  "propiedade1": {
	    value: true,
	    writable: true
	  },
	  "propiedade2": {
	    value: "Cadea de texto",
	    writable: false
	  }
	});
	console.info(meuObxecto);
	meuObxecto.propiedade = "Propiedade orixinal Modificada";
	console.info(meuObxecto.propiedade);
	meuObxecto.propiedade2 = "Cadea de texto... ¿modificada?";
	console.info(meuObxecto.propiedade2);
    ~~~~~~~

- ***[.getOwnPropertyDescriptor()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/getOwnPropertyDescriptor)***

	Devolve os detalles das propiedades e métodos do obxecto. No caso de non existir retornará *undefined*.

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  metodo: function() {
	  	console.log(meuObxecto.propiedade1)
	  },
	  propiedade1: "Datos"
	};

	console.info(Object.getOwnPropertyDescriptor(meuObxecto, 'propiedade1'));
	// {value: "Datos", writable: true, enumerable: true, configurable: true}

	console.info(Object.getOwnPropertyDescriptor(meuObxecto, 'inventado'));
	// undefined
    ~~~~~~~

- ***[.getOwnPropertyNames()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/getOwnPropertyNames)***

	c un array con tódolos nomes das propiedades e métodos do obxecto.

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  metodo: function() {
	  	console.log(meuObxecto.propiedade1)
	  },
	  propiedade1: "Datos"
	};

	console.log(Object.getOwnPropertyNames(meuObxecto));
	// ["metodo", "propiedade1"]
	~~~~~~~

- ***[.isExtensible()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/isExtensible)***

	Determina se un obxecto é extensible, é dicir que se poidan agregar novas propiedades ao mesmo.

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  metodo: function() {
	  	console.log(meuObxecto.propiedade1)
	  },
	  propiedade1: "Datos"
	};

	console.log("¿Pódese estender?", Object.isExtensible(meuObxecto));

	var selado = Object.seal(meuObxecto);
	console.log("¿Pódese estender?", Object.isExtensible(selado));

	var conxelado = Object.freeze(meuObxecto);
	console.log("¿Pódese estender?", Object.isExtensible(conxelado));

	Object.preventExtensions(meuObxecto);
	console.log("¿Pódese estender?", Object.isExtensible(meuObxecto));
    ~~~~~~~


- ***[.hasOwnProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)***

	Devolve true ou false se a propiedade existe ou non.

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  metodo: function() {
	  	console.log(meuObxecto.propiedade1)
	  },
	  propiedade1: "Datos"
	};

	console.log("¿Ten a propiedade \"propiedade1\"?", meuObxecto.hasOwnProperty('propiedade1'));
	console.log("¿Ten a propiedade \"propiedade2\"?", meuObxecto.hasOwnProperty('propiedade2'));
    ~~~~~~~


{pagebreak}


- ***[.propertyIsEnumerable()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable)***

	Devolve true ou false, se a propiedade especificada é enumerable, e con elo sabemos se será incluída na iteración dun bucle *For... In*.

    {lang=js}
    ~~~~~~~
	var meuObxecto = {
	  metodo: function() {
	  	console.log(meuObxecto.propiedade1)
	  },
	  propiedade1: "Datos"
	};

	console.log("¿É enumerable \"propiedade1\"?", meuObxecto.propertyIsEnumerable('propiedade1'));
	console.log("¿É enumerable \"metodo\"?", meuObxecto.propertyIsEnumerable('propiedade2'));
    ~~~~~~~

- ***[.toLocaleString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString)***

	Retorna coma string (configuración rexional) tódalas propiedades.

    {lang=js}
    ~~~~~~~
	var data = new Date();

	var meuObxecto = {
	  metodo: function() {
	  	console.log(meuObxecto.propiedade1)
	  },
	  propiedade1: "Datos",
	  fecha: fecha
	};

	meuObxecto.toLocaleString()
	console.log("A data é ", meuObxecto.fecha);
    ~~~~~~~




## Métodos Avanzados

Algúns dos métodos máis utilizados requiren comprender en profundidade o manexo de funcións é en especial o *retorno*.

I> Como aínda non falamos de funcións, a miña recomendación é ler por
I> encima os seguintes métodos e o seu funcionamento... pra retornar máis adiante a este capítulo.


{pagebreak}

- ***[For... in](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/for...in)***

	Itera sobre tódalas propiedades dun obxecto, nunha orde arbitraria.

    {lang=js}
    ~~~~~~~
	var obxecto1 = {
		propiedade1: "ola",
		propiedade2: 2,
		propiedade3: false,
		propiedade4: [true,2,5, "..."],
		propiedade5: {
			dato: "máis datos..."
		},
		metodo: function(){
			console.log("ola");
		}
	}

	function mostrar_propiedades(obxecto, nombreObjeto) {
	   var resultado = "";
	   for (var i in obxecto) {
	      resultado += nombreObjeto + "." + i + " = " + obxecto[i] + "\n";
	   }
	   return resultado;
	}

	mostrar_propiedades(obxecto1, "obxecto1");
    ~~~~~~~



## Usos Especiais

### Traballando con espazos e caracteres especiais

{lang=js}
~~~~~~~
var miObjeto = {
	nome: "obxecto",
    "ano": 2015,
    "estado do sistema": "correcto"
};

console.log(meuObxecto["ano"]);
meuObxecto["estado do sistema"] = "fora de servizo";
console.log(meuObxecto["estado do sistema"]);
~~~~~~~

{pagebreak}


### Acortar obxectos

En ocasións, especialmente ao parsear datos de internet en formato JSON, os obxectos poden estar moi anidados... dificultando enormemente o manexo. Por iso poderemos considerar unha boa práctica, acortalos con novas variables ou sobrescribilos ao propio obxecto con aqueles datos relevantes:


{lang=js}
~~~~~~~
var obxectoAbreviado = obxecto.moi.longo["metodos e propiedades"];

obxectoAbreviado.propiedade1;
~~~~~~~

## Estruturas de datos

Un bo manexo de obxectos, daranos as chaves pra poder ter unha estrutura de datos eficiente na nosa aplicación e nas *[comunicacións cliente-servidor](https://es.wikipedia.org/wiki/Cliente-servidor)*.

I> Os obxectos, sentan as bases sobre as que logo almacenaremos moita máis información, 
I> no capítulo 12, veremos moito máis sobre isto.
