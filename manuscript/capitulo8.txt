# Capítulo 8 - Arrays

{:: encoding="utf-8" /}
{footnotes-off}

Os arrays son estruturas que permítennos almacenar moitos datos, sen ter que preocuparnos
pola orde ou a organización interna.

Outra forma máis sinxela de entendelo, é imaxinar que un array é sinxelamente como unha lista da compra.

Partindo desta analoxía será sinxelo engadir elementos a nosa lista:

{line-numbers=off, lang=text}
~~~~~~~
- Tomates
- Café
- Brócoli
- Coentro
- Lámpadas
~~~~~~~

Como a orde dos elementos en principio danos igual, utilizaremos un marcador numérico pra referirnos a cada elemento da lista. Loxicamente comezaremos polo cero, xa que somos desenvolventes.

{line-numbers=off, lang=text}
~~~~~~~
0 - Tomates
1 - Café
2 - Brócoli
3 - Coentro
4 - Lámpadas
~~~~~~~

Cando engadimos elementos a lista a orde pode alterarse ou non, en función de se se engadiran antes ou despois doutros elementos.

{line-numbers=off, lang=text}
~~~~~~~
0 - Tomates
1 - Café
leanpub-start-insert
2 - Te (Novo)
3 - Brócoli (movido)
4 - Coentro (movido)
5 - Lámpadas (movido)
6 - Pen Drive
leanpub-end-insert
~~~~~~~

{pagebreak}

Cando eliminamos elementos tamén alteramos a lista.... en función de se están diante de outros elementos ou non.

{line-numbers=off, lang=text}
~~~~~~~
0 - Tomates
1 - café
2 - Te
3 - Brócoli
leanpub-start-delete
4 Coentro (Borrado)
leanpub-end-delete
leanpub-start-insert
4 - Lámpadas (movido)
leanpub-end-insert
leanpub-start-delete
6 - Pen Drive (Borrado)
leanpub-end-delete
~~~~~~~

Loxicamente dentro dun array poderemos almacenar todo tipo de datos (cadeas, números, obxectos, funcións…

I> Noutras linguaxes de programación existen máis estruturas similares a estas listas (arrays)
I> como é o caso das tuplas en Python.


## Manexo

### Creando un array

Baleiro:

{lang=js}
~~~~~~~
var arreglo = [];
~~~~~~~

Con elementos:

{lang=js}
~~~~~~~
var arreglo = [1, "plátano", "piscina", "mazá", true];
~~~~~~~

### Usando el Índice

{lang=js}
~~~~~~~
var arreglo = [1, "plátano", "piscina", "mazá", true];
console.log("arreglo[1]:", arreglo[1]);
~~~~~~~

{pagebreak}


### Cambiar un valor do Índice

{lang=js}
~~~~~~~
var arreglo = [1, "plátano", "piscina", "mazá", true];
arreglo[0] = "fresa";
arreglo[4] = "pera";
arreglo[2] = "limón";
~~~~~~~


### Borrando elementos

#### Sobrescribindo a *[undefined](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/undefined)*

En ocasións só queremos deixar o oco baleiro e non cambiar a orde dos elementos dun array.

Nestes casos o mellor é substituír o valor por *[undefined](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/undefined)* xa sexa usando *[delete](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/delete)* ou igualando.

{lang=js}
~~~~~~~
var arreglo = [1, "plátano"];
arreglo[0] = undefined;
delete arreglo[1];
~~~~~~~

#### Borrando o elemento

Ao eliminar un elemento do array cambiamos a orde dentro do array.

{lang=js}
~~~~~~~
var arreglo = [1, "plátano", "mazá"];
arreglo.splice(1, 1);
console.log(arreglo[1]) // mazá
~~~~~~~

## Propiedades

- ***[.length](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/length)***

    Poderemos saber cantos elementos conten un array.

    {lang=js}
    ~~~~~~~
    var arreglo = [1, "plátano", "mazá"]
    arreglo.length; // 3
    ~~~~~~~

    Ao ter este dato chave poderemos facer bucles que realicen as súas iteracións en función da cantidade de elementos.

    Presta atención ao uso da *variable i* no interior do bucle pra recorrer o array.

    {lang=js}
    ~~~~~~~
    var numeros = [1, 2, 3, 4, 5];
    for (var i = 0; i < numeros.length; i++) {
        numeros[i] *= 10;
    }
    ~~~~~~~

    I> Máis adiante veremos que existen estruturas máis optimizadas pra iterar sobre un array como
    I> *map()* y *forEach()*.


## Métodos

Facemos unha recopilación simplificada dos métodos máis utilizados, anque existen moitos máis.


- ***[.isArray()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/isArray)***

    Retorna un booleano en función de que o parámetro sexa un array ou non.

    {lang=js}
    ~~~~~~~
    var arreglo = [1,2,3]

    // Estes son true
    Array.isArray([1]);
    Array.isArray(arreglo);

    // Estes son false
    Array.isArray();
    Array.isArray({});
    Array.isArray(null);
    Array.isArray(undefined);
    ~~~~~~~

- ***[.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)***

    Permite organizalos elementos dun Array, por orde alfabético ou en función numérica (ascendente).

    {lang=js}
    ~~~~~~~
    var froitas = ['plátano', 'Laranxa', 'Limón', 'Mazá', 'Mango'];
  	froitas.sort(); // ["Limón", "Mango", "Mazá", "Laranxa", "plátano"]
  	var numeros = [0, 45, 2, -5, 123, -47];
  	numeros.sort() // [-47, -5, 0, 123, 2, 45]
    ~~~~~~~

    Anque en ocasións o ordenado pode non funcionar como esperamos, se os elementos que compoñen o Array son dunha natureza distinta.

    {lang=js}
    ~~~~~~~
    var meuArray = ['un', 2, true, 'máis datos...'];
  	meuArray.sort(); // [2, "máis datos...", true, "un"]
    ~~~~~~~

- ***[.reverse()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/reverse)***

    Inverte a orde dun array.

    {lang=js}
    ~~~~~~~
	var meuArray = ['un', 2, true, 'máis datos...'];
	meuArray.reverse();
	console.log(meuArray) // ["máis datos...", true, 2, "un"]
    ~~~~~~~

- ***[.join()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/join)***

    Retorna unha cadea con tódolos elementos dun array dentro.

    {lang=js}
    ~~~~~~~
	var array = ['dato1', 2, 'maisDatos'];
	var datosJuntos = array.join();       // 'dato1,2,maisDatos'
	var datosJuntos2 = array.join('');    // 'dato12maisDatos'
	var datosJuntos3 = array.join(' + '); // 'dato1 + 2 + maisDatos'
    ~~~~~~~

- ***[.toString()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/toString)***

    Retorna una cadea de texto con tódolos elementos.

    {lang=js}
    ~~~~~~~
	var amigos = ['Luis', 'Carlos', 'Marco', 'Eduardo'];
	console.log(amigos.toString());
    ~~~~~~~

- ***[.toLocalString()](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)***

    Retorna coma string (configuración rexional) tódolos elementos.

    {lang=js}
    ~~~~~~~
	var numero = 1337.89;
	var data = new Date();
	var meuArray = [numero, data, 'máis datos'];

	var arrayConvertida = meuArray.toLocaleString();
	console.log(arrayConvertida);
    ~~~~~~~

- ***[.concat()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/concat)***

    Retorna un novo array cos arrays especificados concatenados.

    - Dos arrays:

        {lang=js}
        ~~~~~~~
        var arreglo = ['a', 2, true];
      	var arreglo2 = [1, 2, 4];

      	var novoArray = arreglo.concat(arreglo2);

  	    console.log(novoArray);
        ~~~~~~~

    {pagebreak}
    
    - Múltiples arrays:

        {lang=js}
        ~~~~~~~
        var arreglo = ['a', 2, true];
      	var arreglo2 = [1, 2, 4];
      	var outroArreglo = ['abc', 1, false]

      	var novaArray = arreglo.concat(arreglo2, [5.25, 100], outroArreglo);

  	    console.log(novaArray);
        ~~~~~~~

- ***[.indexOf()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/indexOf)***

    Devolve a posición onde se atopa o elemento en sí ou -1, se non o atopa.

    {lang=js}
    ~~~~~~~
    var array = [2, 5, 9];
  	var index = array.indexOf(9);  // 2
  	var index = array.indexOf(12); // -1
    ~~~~~~~

- ***[.lastIdexOf()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/lastIndexOf)***

    Devolve a posición do último elemento en sí que coincide ou -1, se non o atopa.

    {lang=js}
    ~~~~~~~
	var array = [7, 1, 3, 7];
	array.lastIndexOf(7); // 3
	array.lastIndexOf(2); // -1
    ~~~~~~~

- ***[.push()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/push)***

    Engade novos elementos ao final dun array.

    {lang=js}
    ~~~~~~~
    var arreglo = [1, "plátano", "mazá"];
    console.log("Antes:", arreglo.length);
	arreglo.push("novo");
	console.log("Despois:", arreglo.length);
	console.log("arreglo[4]:", arreglo[4]);
    ~~~~~~~

- ***[.unShift()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)***

    Engade novos elementos ao principio del array.

    {lang=js}
    ~~~~~~~
	var meuArray = [1, 2];
	meuArray.unshift(true, "outros datos...");
	console.log("Lonxitude actual:", meuArray.length);
    ~~~~~~~

- ***[.pop()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/pop)***

    Eliminar o último elemento del array.

    {lang=js}
    ~~~~~~~
    var meuArray = [1, 2];
    arreglo.pop();
	console.log("Lonxitude actual:", meuArray.length);
    ~~~~~~~

{pagebreak}

- ***[.shift()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/shift)***

    Eliminar o primeiro elemento do array.

    {lang=js}
    ~~~~~~~
    arreglo.shift();
    ~~~~~~~

- ***[.splice()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/splice)***

    Borrar elementos do array, alterando con elo a posición dos demais.

    {lang=js}
    ~~~~~~~
    var froitas = ['plátano', 'Laranxa', 'Limón', 'Mazá', 'Mango'];
    console.log("froitas[1]:", froitas[1]) // Laranxa
    froitas.splice(1, 3);
    console.log("froitas[1]:", froitas[1]) // Mango
    console.info("froitas.length:", froitas.length); // 2
    ~~~~~~~

    Se desexamos conservar nunha variable aqueles elementos que eliminamos, é necesario facer unha asignación como esta:

    {lang=js}
    ~~~~~~~
    var froitas = ['plátano', 'Laranxa', 'Limón', 'Mazá', 'Mango'];
    var citricos = froitas.splice(1, 2);
    console.info("citricos:", citricos);
    console.info("froitas.length:", froitas.length);
    ~~~~~~~


## Métodos Avanzados

Algúns dos métodos máis utilizados, requiren comprender en profundidade o manexo de funcións e en especial o *retorno*.

I> Como aínda non falamos de funcións directamente, a nosa recomendación é ler por
I> encima os seguintes métodos e o seu funcionamento... pra regresar máis adiante a este capítulo.


- ***[.some()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/some)***

    Verifica se algún dos elementos do array pasan a proba implementada pola función dada.

    {lang=js}
    ~~~~~~~
	function tamañoValido(elemento, indice, arreglo) {
	  return elemento >= 10;
	}
	[12, 5, 8, 130, 44].some(tamañoValido);   // true
	[12, 54, 18, 130, 44].some(tamañoValido); // true
    ~~~~~~~

- ***[.every()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/every)***

    Verifica se tódolos elementos do array pasan a proba implementada pola función dada.

    {lang=js}
    ~~~~~~~
	function tamañoValido(elemento, indice, arreglo) {
	  return elemento >= 10;
	}
	[12, 5, 8, 130, 44].every(tamañoValido);   // false
	[12, 54, 18, 130, 44].every(tamañoValido); // true
    ~~~~~~~

- ***[.filter()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/filter)***

    Crea un novo array con aqueles elementos que cumpran a condición.

    {lang=js}
    ~~~~~~~
	function tamañoValido(elemento) {
	  return elemento >= 10;
	}
	var filtrados = [true, 134, 10, 0, null, "Ola"].filter(tamañoValido);
    ~~~~~~~

- ***[.forEach()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/forEach)***

    Executase a función por cada elemento do array.

    {lang=js}
    ~~~~~~~
	function logger(element, index, array) {
	    console.log("array[" + index + "] = " + element);
	}
	[2, 5, 9].forEach(logger);
    ~~~~~~~

- ***[.map()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/map)***

    Itera sobre o array aplicando unha transformación, que definimos nunha función e finalmente retorna un novo array con tódolos compoñentes modificados.

    {lang=js}
    ~~~~~~~
	var arreglo = ["plátano", "fresa", "lima", "mazá"];
	var resultado = arreglo.map(function (elemento){return elemento + " modificado!"});
	console.log(resultado);
    ~~~~~~~


## Arrays multidimensionais

Non deixedes que o nome vos asuste, sinxelamente cando temos arrays almacenados dentro de outros arrays, entenderemos que traballase sobre *[Matrices ou Arrays multidimensionais](https://es.wikipedia.org/wiki/Vector_(inform%C3%A1tica))*. É sinxelo:

{lang=js}
~~~~~~~
var arreglo1 = ["plátano", "fresa", "lima", "mazá"];
var arreglo2 = ["entrante", "primeiro", "segundo", "sobremesa"];

var xuntandoArreglos = [arreglo1, arreglo2];

console.log(xuntandoArreglos[0][0]); // plátano
console.log(xuntandoArreglos[1][3]); // sobremesa
~~~~~~~
