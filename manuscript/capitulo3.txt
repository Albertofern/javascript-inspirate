# Capítulo 3 - console.log("Ola Mundo");

{:: encoding="utf-8" /}
{footnotes-off}

## JSHint

É unha ferramenta chave pra o noso día a día, xa que permítenos detectar erros comúns no código JavaScript que desenvolvamos.

Pra usuarios máis avanzados é recomendábel utilizar *[esLint](http://eslint.org/)*, xa que proporciónanos múltiples configuracións avanzadas.

JSHint pode ser utilizado directamente dende a web o como un plugin máis no teu editor favorito.

I> #### Máis información:
I>
I> - *[JSHint Online](http://jshint.com/)*
I> - *[JSHint About](http://jshint.com/about/)*
I> - *[JSHint Repository](https://github.com/jshint/jshint)*

## Consola

A ferramenta máis utilizada será a consola de JavaScript, que é unha das múltiples utilidades que nos ofrecen os navegadores pra depurar o noso código.

Si xa desenvolves habitualmente utilizando CSS y HTML, estarás familiarizado con este conxunto de ferramentas e o seu potencial, se non deberías *[seguir estes sinxelos pasos](https://developers.google.com/web/tools/chrome-devtools/)*.

Eu persoalmente, prefiro utilizar Google Chrome anque sen dubida Mozilla Firefox, tamén é unha boa opción pra depurar e desenvolver o noso código.

Pra facer uso da consola... necesitamos chamar ao obxecto *[console](https://developer.mozilla.org/es/docs/Web/API/Console)*.

I> #### Máis información:
I>
I> - *[@ChromeDevTools en Twitter](https://twitter.com/chromedevtools?lang=es)*
I> - *[Chrome DevTools](https://developer.chrome.com/devtools)*


### Métodos destacados:

Facemos unha recopilación simplificada dos métodos máis utilizados, anque existen moitos máis.

- ***[.assert()](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)***

	Aparece unha mensaxe de erro na consola se a afirmación é falsa.

    {lang=js}
    ~~~~~~~
    var controlador = false;
    console.assert(controlador, "\"controlador\" é igual a \"false\"");
    ~~~~~~~


- ***[.clear()](https://developer.mozilla.org/es/docs/Web/API/Console/clear)***

	Limpa a consola.

    {lang=js}
    ~~~~~~~
    console.clear()
    ~~~~~~~


- ***[.dir()](https://developer.mozilla.org/en-US/docs/Web/API/Console/dir)***

	Retorna unha lista interactiva das propiedades dun obxecto.

    {lang=js}
    ~~~~~~~
    console.dir(document.body);
    ~~~~~~~

- ***[.dirxml()](https://developer.mozilla.org/en-US/docs/Web/API/Console/dirxml)***

	Retorna unha representación HTML do obxecto.

    {lang=js}
    ~~~~~~~
    console.dirxml(document.body);
    ~~~~~~~


#### Agrupadores

- ***[.group()](https://developer.mozilla.org/en-US/docs/Web/API/Console/group)***

	Crea un grupo de mensaxes de consola.

- ***[.groupCollapsed()](https://developer.mozilla.org/en-US/docs/Web/API/Console/groupCollapsed)***

	Crea un grupo de mensaxes de consola minimizados por defecto.

    {lang=js}
    ~~~~~~~
    console.groupCollapsed("bucleFor");
    for(var i=100; i>0; i--){
        console.info("Iteración numero %i", i)
    }
    console.groupEnd();
    ~~~~~~~

- ***[.groupEnd()](https://developer.mozilla.org/en-US/docs/Web/API/Console/groupEnd)***

	Pecha o grupo de mensaxes.

{pagebreak}

#### Táboas

- ***[.table()](https://developer.mozilla.org/en-US/docs/Web/API/Console/table)***

	Mostra os datos dentro dunha táboa.

    {lang=js}
    ~~~~~~~
    var linguaxes = [
        { nome: "JavaScript", extensión: ".js" },
        { nome: "TypeScript", extensión: ".ts" },
        { nome: "CoffeeScript", extensión: ".coffee" }
    ];

    console.table(linguaxes);
    console.table(linguaxes, "extensión");
    ~~~~~~~

#### Xestión do tempo

- ***[.time()](https://developer.mozilla.org/en-US/docs/Web/API/Console/time)***

	Inicia un contador en ms.

- ***[.timeEnd()](https://developer.mozilla.org/en-US/docs/Web/API/Console/timeEnd)***

	Para o contador e devolve o resultado.

    {lang=js}
    ~~~~~~~
    console.time("Medición de meuArray");
    var meuArray = new Array(1000000);
    for (var i = meuArray.length - 1; i >= 0; i--) {
     meuArray[i] = new Object();
    };
    console.timeEnd("Medición de meuArray");
    ~~~~~~~


#### Notificadores

- ***[.log()](https://developer.mozilla.org/en-US/docs/Web/API/Console/log)***

	Saca unha mensaxe por consola.

    {lang=js}
    ~~~~~~~
    console.log("Ola en formato clásico");
    ~~~~~~~

- ***[.info()](https://developer.mozilla.org/en-US/docs/Web/API/Console/info)***

	Saca unha mensaxe por consola cun estilo informativo.

    {lang=js}
    ~~~~~~~
    console.info("Ola en formato informativo");
    ~~~~~~~

- ***[.warn()](https://developer.mozilla.org/en-US/docs/Web/API/Console/warn)***

	Saca unha mensaxe por consola cun estilo alerta.

    {lang=js}
    ~~~~~~~
    console.warn("Ola en formato alerta");
    ~~~~~~~

- ***[.error()](https://developer.mozilla.org/en-US/docs/Web/API/Console/error)***

	Saca unha mensaxe por consola de erro, cos mesmos estilos, creando confusión.

	Non se recomenda o seu uso.

    {lang=js}
    ~~~~~~~
    console.error("Ola en formato erro");
    ~~~~~~~

#### Formateadores

|Formato |Descrición    |
|--------|--------------|
|%s      |Cadea         |
|%d o %i |Número enteiro|
|%f      |Decimal       |
|%o      |DOM           |
|%O      |Obxecto js    |
|%c      |CSS           |


**Exemplos:**

- *%o* pra estruturas del DOM:

    {lang=js}
    ~~~~~~~
    var parágrafos = document.getElementsByTagName("p");
    console.log("DOM: %o", parágrafos);
    ~~~~~~~

- *%O* pra obxectos JS:

    {lang=js}
    ~~~~~~~
    var obxecto = {"nome":"Eu","Apelido":"Mesmo"};
    console.log("Obxecto: %O", obxecto);
    ~~~~~~~

- Usando CSS:

    {lang=js}
    ~~~~~~~
    console.log('Isto é aburrido...');
    console.log('%c Pero pódese mellorar facilmente! ', 'background: #3EBDFF; color: #FFF; font-size:25px;');
    ~~~~~~~

## Caracteres especiais:

Incluíndo certos caracteres especiais nas nosas cadeas de texto, podemos maquetar o resultado que se imprimirá pola consola.

* `\t` *Tabulador*
* `\'` *Comiñas Simples*
* `\"` *Comiñas Dobres*
* `\n` *Salto de liña*

{lang=js}
~~~~~~~
console.log("Ata aquí... todo correcto. Agora vamos a \"tabular\":\tves? Xa estamos máis lonxe.\n\'Outra liña ;-)\'")
~~~~~~~

## Comentarios

T> Os comentarios axúdannos a entender o noso código, en ocasións podemos utilizalos pra
T> silenciar temporalmente partes do código.

Algúns desenvolventes aconsellan utilizar *[JSDoc](https://en.wikipedia.org/wiki/JSDoc)*, como un sistema pra determinar como debe comentarse de maneira sistemática o noso código.

Ao utilizar *[JSDoc](https://en.wikipedia.org/wiki/JSDoc)* podes exportar eses comentarios como un ficheiro Html, que permitiranos documentar o noso proxecto facilmente.

Como regra xeral é mellor poñer comentarios, que non poñelos. Tamén podes usalos comentarios dunha forma máis eficiente si referencias (urls) a documentación no caso das librerías.



-  **Unha liña**

    {lang=js}
    ~~~~~~~
    // Comentario dunha liña
    ~~~~~~~

- **Múltiples liñas**

    {lang=js}
    ~~~~~~~
    /*
    Unha Liña....
    Outra Liña...
    Etc...
    */
    ~~~~~~~

- **JSDoc**

    {lang=js}
    ~~~~~~~
    /**
     * Represents a book.
     * @constructor
     * @param {string} title - The title of the book.
     * @param {string} author - The author of the book.
     */
    function Book(title, author) {
    }
    ~~~~~~~


## Nomes de variables

*[As variables](https://es.wikipedia.org/wiki/Variable_(programaci%C3%B3n))* teñen unhas regras moi especificas que debemos seguir a hora de designar os seus nomes.

* Debemos usar nomes que expliquen que aporta esa variable ao noso código.
* No se poden usar espazos.

    {lang=js}
    ~~~~~~~
    var con espazos = 1;
    ~~~~~~~

* Non usar un número diante.

    {lang=js}
    ~~~~~~~
    var 1numero = 1;
    ~~~~~~~

* Evitar símbolos e *[snake_case](https://en.wikipedia.org/wiki/Snake_case)*.

    {lang=js}
    ~~~~~~~
    var con_guiones_bajos = 1; //snake_case é pouco común en JavaScript
    var dame$ = 1; // en serio?
    ~~~~~~~



* Usar *[camelCase](https://es.wikipedia.org/wiki/CamelCase)*.

    {lang=js}
    ~~~~~~~
    var outraOpcion = 1;
    var opcionCon123123 = 1;
    ~~~~~~~


T> **Truco**
T>
T> Se estas realizando cambios nun código que sigue unha pauta distinta a cameCase. ¡Ségueo!
T>
T> A coherencia no código é máis importante, recórdao.


## Tipos de variables

Un primeiro paso pra dominar os tipos de variables é utilizar o operador *typeof*, e coñecer a súa *[especificación](http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.3)*.

I>***[Tipado Débil vs. Tipado Forte](https://es.wikipedia.org/wiki/Tipado_fuerte)***
I>
I> As variables en JavaScript non necesitan ser declaradas tendo en conta *[el tipo de dato](https://es.wikipedia.org/wiki/Tipo_de_dato)* que conteñen, como sucede noutras linguaxes


É importante coñecer os tipos de *[variables dispoñibles](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)*:


- ***[Undefined](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/undefined)***

    {lang=js}
    ~~~~~~~
    typeof undefined
    typeof nonDefinido
    typeof tampoucoCreado
    ~~~~~~~

{pagebreak}

- ***[Object](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object)***

    {lang=js}
    ~~~~~~~
    typeof null
    typeof [15, 4]
    typeof new Date()
    typeof {a:1}
    ~~~~~~~

- ***[Boolean](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Boolean)***

    {lang=js}
    ~~~~~~~
    typeof false
    typeof true
    typeof Boolean(false)
    ~~~~~~~

- ***[Number](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Number)***

    {lang=js}
    ~~~~~~~
    typeof 3
    typeof 3.14
    typeof NaN
    typeof Infinity
    ~~~~~~~

- ***[String](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/String)***

    {lang=js}
    ~~~~~~~
    typeof "Ola"
    ~~~~~~~

- ***[Function](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Function)***

    {lang=js}
    ~~~~~~~
    typeof function(){}
    ~~~~~~~

Existe un tipo máis... *[Symbol](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Symbol)* pero pertence a *[ECMA6](http://es6-features.org/#Constants)*, é por isto, que non o desenvolvemos aquí.


## *[Matemáticas Básicas](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators)*

As matemáticas básicas en JavaScript son moi similares a calquera linguaxe.

O único operador matemático que pode resultarnos estraño é *[o módulo](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Aritm%C3%A9ticos)*.

{lang=js}
~~~~~~~
var suma = 5 + 4;
var resta = 10 - 6;
var multiplicacion = 3 * 3;
var division = 6 / 2;
var modulo = 43 % 10;
~~~~~~~

I> **Traballando con Decimais**
I>
I> En JavaScript o decimal 1.0 e o enteiro 1, son iguais.
I>
I> `console.log((5.0+1) === (5+1)) // true`

### Matemáticas Básicas (Agrupando operacións)

Cos parénteses facilmente pódense priorizar operacións.

A orde de execución comeza polos parénteses, logo multiplicacións e divisións... pra terminar coas sumas e restas.

{lang=js}
~~~~~~~
var expresion1 = (3 + 7) * 10;
var expresion2 = (-56 * 6) - 74 * -25;
var expresion3 = (3 * 3) + 10 - 12 / 2;
var expresion4 = 44 + (83 % (33 + 100));
var expresion5 = -145 + (500 / 10 - 5) + 10 * 10 ;
~~~~~~~

### Matemáticas Básicas (crecemento e decrecemento)

O crecemento e decrecemento, pode suceder antes ou despois que o valor da variable sexa lido polo navegador, en función de onde se atopa o operador (++antes ou despois++).

{lang=js}
~~~~~~~
var numero = 5;

console.log(--numero); // 4
console.log(numero--); // 5 (logo 4)
console.log(++numero); // 6
console.log(numero++); // 5 (logo 6)
~~~~~~~

## *[Operadores de asignación](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Assignment_Operators)*

Estes operadores, permítennos alterar de maneira sinxela e controlada o valor dunha variable.

* = **Asignación**

    {lang=js}
    ~~~~~~~
    var x = 1;
    var y = 2;
    x = y;
    console.info("\"x\" vale ", x);
    ~~~~~~~

* += **Suma**

    {lang=js}
    ~~~~~~~
    var x = 1;
    var y = 2;
    x += y; // x = x + y
    console.info("\"x\" vale ", x);
    ~~~~~~~

{pagebreak}

* -= **Resta**

    {lang=js}
    ~~~~~~~
    var x = 1;
    var y = 2;
    x -= y; // x = x - y
    console.info("\"x\" vale ", x);
    ~~~~~~~

- *= **Multiplicación**

    {lang=js}
    ~~~~~~~
    var x = 1;
    var y = 2;
    x *= y; // x = x * y
    console.info("\"x\" vale ", x);
    ~~~~~~~

* /= **División**

    {lang=js}
    ~~~~~~~
    var x = 1;
    var y = 2;
    x /= y; // x = x / y
    console.info("\"x\" vale ", x);
    ~~~~~~~

* %= **Módulo (Resto)**

    {lang=js}
    ~~~~~~~
    var x = 1;
    var y = 2;
    x %= y;  // x = x % y
    console.info("\"x\" vale ", x);
    ~~~~~~~


**Xogando con variables**

Se executas o seguinte fragmento de código, veralo fácil que resulta perdelo control das nosas variables, se non temos moito coidado.

{lang=js}
~~~~~~~
var empezouComa3 = 3;
foi3();

empezouComa3 = 35;
foi3();

empezouComa3 = empezouComa3 + 30;
foi3();

empezouComa3 += 4;
foi3();

empezouComa3++;
foi3();

empezouComa3 -= 12;
foi3();

empezouComa3--;
foi3();

empezouComa3 *= 10;
foi3();

empezouComa3 /= 11;
foi3();

empezouComa3 += "texto";
foi3();

empezouComa3 += 20;
foi3();

empezouComa3++;
foi3();


function foi3 () {
    console.log("empezouComa3 debería ser 3, agora o seu valor é " + empezouComa3);
};
~~~~~~~



## Interacción Básica co Usuario

Podes interactuar co usuario dende JavaScript, utilizando uns métodos sinxelos que xa veñen implementados en tódolos navegadores. Isto fai uns anos era moi común e pouco a pouco converteuse nunha mala práctica.

I> O propio navegador, ofrece ao usuario a posibilidade de bloquear esta interacción. O ideal é
I> xestionar esta interacción co usuario dende o HTML, como veremos nos próximos capítulos.
I>
I> No caso de depuración e prototipado de código pode ser un recurso moi útil.

{pagebreak}

- ***[Window.alert()](https://developer.mozilla.org/es/docs/Web/API/window/alert)***

	Mostra a nosa mensaxe nunha ventá.

    {lang=js}
    ~~~~~~~
    alert("¡Benvido a esta web!");
    ~~~~~~~

- ***[Window.confirm()](https://developer.mozilla.org/es/docs/Web/API/Window/confirm)***

	Pregunta ao usuario e ofrece dous botóns que tradúcense en valores booleanos. Aceptar (true) e cancelar o cerrar a ventá (false).

    {lang=js}
    ~~~~~~~
    confirm("¿Esta seguro que desexa abandonar esta web?");
    ~~~~~~~

	Exemplo:

    {line-numbers=on, lang=js}
    ~~~~~~~
    var resposta = confirm("preme un botón!");
    if (resposta === true) {
        console.log("Acertaches!");
    } else {
        console.log("Cancelaches");
    }
    ~~~~~~~

- ***[Window.prompt()](https://developer.mozilla.org/es/docs/Web/API/window/prompt)***

	Pregunta ao usuario e permite a escritura devolvendo a mensaxe.

    {lang=js}
    ~~~~~~~
    prompt("¿Como te chamas?");
    ~~~~~~~

	Rexistremos os datos nunha variable:

    {lang=js}
    ~~~~~~~
    var nome = prompt("¿Como te chamas?");
    ~~~~~~~
