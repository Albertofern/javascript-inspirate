# Capítulo 1 - JavaScript de fai 10 minutos

{:: encoding="utf-8" /}
{footnotes-off}


I> **Batalliñas do avó**
I>
I> Neste capítulo falarei da historia da nosa industria e como chegamos ata onde estamos.
I> Algúns lectores xa estaredes familiarizados con isto e non necesitaredes repasar a nosa historia.
I> Neste caso... simplemente pasade ao seguinte capítulo.

Vou contarche una historia que narra o sacrificio e a loita diaria dun grupo inmenso de persoas por todo o mundo que creron, que unha idea tan xenial como interconectar ordenadores podería chegar ser a mellor forma de compartir o coñecemento da humanidade, convertendo Internet nunha marabillosa e moi valiosa ferramenta pra a humanidade.

Para chegar ata onde estamos hoxe... moita *[sangre de unicornio](http://www.forbes.com/sites/quora/2013/06/27/the-myth-of-the-myth-of-the-unicorn-designer/#3f34d3c83504)* derramouse.

**E agora poñámonos serios para falar da nosa industria.**

## A historia da nosa industria

{icon=coffee}
G> #### Lecturas recomendadas:
G>
G> - *[History of the Internet by Melih Bilgil](https://www.youtube.com/watch?v=9hIQjrMHTv4)*
G> - *[What is the Internet? by Code.org](https://www.youtube.com/watch?v=Dxcc6ycZ73M)*

[A Evolución da web](http://www.evolutionoftheweb.com/?hl=es#/evolution/night) desenvolta polo  *[equipo de Google Chrome](https://github.com/GoogleChrome)* é un portal que permítenos visualizar os feitos máis importantes na historia da web dende 1991 hasta 2013.

### 1991 - 1993

Os primeiros anos da web pasan con moita calma. Crease *[HTTP](https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol)* y HTML1 dando o pistoletazo de saída pra que comezara o mundo web. O primeiro navegador web gráfico, *[Mosaic](https://es.wikipedia.org/wiki/Mosaic)*.

### 1994 - 1995

Xorden os tres navegadores principais da época; *[Netscape Navigator](https://es.wikipedia.org/wiki/Netscape_Navigator)*, *[Opera](https://es.wikipedia.org/wiki/Opera_(navegador))* e *[Internet Explorer](https://es.wikipedia.org/wiki/Internet_Explorer)*. Oficializase HTML2 e rapidamente e substituído por HTML3.

Por vez primeira pódense usar *[cookies](https://es.wikipedia.org/wiki/Cookie_(inform%C3%A1tica))*, pero aínda estábamos moi lonxe de ter que poñer *[disclaimers](http://ec.europa.eu/ipg/basícs/legal/cookies/index_en.htm)*, claro que naquela ocasión, internet era moito máis salvaxe e menos regulado. Nun intento firme pra facer a web máis segura, e permitir cousas tan futuristas naquela ocasión como o comercio electrónico, levase a cabo a *[capa SSL](https://es.wikipedia.org/wiki/Transport_Layer_Security)* e así crease o *[HTTPS](https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol_Secure)*, *[IMAPS](https://es.wikipedia.org/wiki/Internet_Message_Access_Protocol)*, *[POP3S](https://es.wikipedia.org/wiki/Post_Office_Protocol)*, *[SMTPS](https://en.wikipedia.org/wiki/SMTPS)*, *[FTPS](https://en.wikipedia.org/wiki/FTPS)*, etc...


Corría o ano 1995, cando *[Brendan Eich](https://es.wikipedia.org/wiki/Brendan_Eich)* creou Mocha, a petición de *[Netscape](https://es.wikipedia.org/wiki/Netscape_Navigator)* coa idea de ter algunha linguaxe de programación dispoñible na web (lado do cliente). Logo renomearíase como LiveScript, para finalmente ser JavaScript. Unha estratexia de marketing dubidosa, que segue hoxe en día sembrando dubidas plantexando que *[Java](https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n))* e JavaScript son cércanos ou iguais, o que é *[completamente falso](http://javascriptisnotjava.io/)*.

Ademais ao longo dese ano, comenza una escalada de problemas pra tódolos desenvolventes do mundo, coñecido como *["Browser Wars"](https://es.wikipedia.org/wiki/Guerra_de_navegadores)* que ata os nosos tempos, seguimos sufrindo os seus efectos.

Basicamente, cada navegador decide facer as implementacions dos distintos compoñentes que viran nos anos seguintes de maneira diferente, o que obrigaba aos *[webmasters](https://es.wikipedia.org/wiki/Webmaster)* a ter que facer o seu código compatible pra tódolos navegadores ao mesmo tempo, replicando esforzos e entorpecendo o traballo diario. Se a isto lle sumamos que por aquela época os navegadores non se autoactualizaban, chegamos así a una situación realmente complexa y atípica que podería evitarse... pero por aquela época Internet era tan só un produto novo co que non se sabía moi ben como se monetizaría nada.

Pra intentar recordar un pouco como foi navegar entonces, algúns nostálxicos recordarán a usabilidade da web naquela época, con contadores de visitas, gifs animados, fotografías pixeladas e mezclas de cor únicas. Era a infancia da web, e inda pódese recordar en sitios como *[The world's Worst Website Ever](http://theworldsworstwebsiteever.com/)*.

![The world's Worst Website Ever - Logo](images/twwwe_logo.gif)

Deixamos esta época de internet con *39,14 Millóns* de usuarios.

### 1996 - 1998

Arrancou esta época cun número inicial de usuarios de 100 millóns, pra terminar con 183,91 millóns.

Internet Explorer introduce unha nova etiqueta html *[iframe](https://es.wikipedia.org/wiki/Iframe)*, que permite a carga dunha páxina web dentro doutra.

Nesta época, aínda maquetabanse as paxinas web *[dentro de táboas](http://www.desarrolloweb.com/articulos/maquetacion-tablas-html.html)*. Conceptos como *[follas de estilos](https://es.wikipedia.org/wiki/Hoja_de_estilo)* estaban moi lonxe de seres viables. Van xurdindo tecnoloxías chaves pra suplir carencias básicas de *interacción*,  *interconectividade* e *visualización*.

Nesta época xorden tecnoloxías como os *[Applets de Java](https://es.wikipedia.org/wiki/Applet_Java)*, *[Flash](https://es.wikipedia.org/wiki/Animaci%C3%B3n_Flash)*, etc...

*[XML](https://en.wikipedia.org/wiki/XML)* convertese no formato de intercambio de datos máis estendido.

En canto a HTML, sigue evolucionando, pasando rapidamente a versión 3.1 y 4, permitindo a separación da parte visual con CSS2. Por vez primeira contido e disposición gráfica da información sepáranse.

Comeza a era dourada de Flash. Polo momento *[CSS](https://es.wikipedia.org/wiki/Hoja_de_estilos_en_cascada)* solo é un chiste comparado coas capacidades de Flash.

*Mosaic* morre na súa versión 2.1, Internet comeza a ser un mercado potencial. Créanse os primitivos sitios web de Google, Yahoo!, Altavista y Amazon.

{icon=history}
G> #### Web Archive:
G>
G> - *[Google Prototipo en 1998](http://web.archive.org/web/19981111184551/http://google.com/)*
G> - *[Google Beta en 1998](http://web.archive.org/web/19981202230410/http://www.google.com/)*
G> - *[Amazon en 1998](http://web.archive.org/web/19981212012532/http://amazon.com/)*

### 1999 - 2007

Foron tempos loucos... co cambio de século, Internet consolidase creando a famosa *["Burbulla puntocom"](https://es.wikipedia.org/wiki/Burbuja_punto_com) que empezou a cociñarse entorno a 1997, pero que terminou de explotar en 2001-2002*.

Sobrevivimos *[ao efecto 2000](https://es.wikipedia.org/wiki/Problema_del_a%C3%B1o_2000)*, con
305,09 millóns de usuarios.

Internet Explorer introduce *[ActiveX](https://en.wikipedia.org/wiki/ActiveX)* na web.
Introducense os primeiros borradores de Ajax. En 2006 introdúcense nos navegadores *[XMLHTTPRequest2](https://www.w3.org/TR/XMLHttpRequest2/)* e comeza a navegación asíncrona, o que permite crear webs realmente dinámicas, que non necesitan unha gran renderización no lado do servidor.

Isto fai posible a mellora no desenvolvemento das primeiras *[plataformas de redes sociais (Web 2.0)](https://es.wikipedia.org/wiki/Web_2.0)*. Pouco a pouco nesta época, o peso de JavaScript vai crecendo, xa que gran parte do procesamento pronto se farase no lado do cliente.

Na parte máis visual comezase a introducir de maneira experimental conceptos como *[SVG](https://es.wikipedia.org/wiki/Scalable_Vector_Graphics)* y *[Canvas](https://es.wikipedia.org/wiki/Canvas_(HTML))*.

Aparecen en escena Facebook, Twitter, Linkedin, Youtube, etc... creando o embrión do que logo serían outras redes sociais.

Aparece *[JQuery](https://es.wikipedia.org/wiki/JQuery)*, unha librería pra JavaScript que cambiou pra sempre a forma de interactuar entre JavaScript e HTML/CSS. Nos anos posteriores, moitos maquetadores utilizarán esta librería como porta de entrada a JavaScript.

A época dourada del *[PHP (pre-Wordpress)](https://es.wikipedia.org/wiki/PHP)*, como motor de innovación pra web con proxectos como *[PHPBB](https://es.wikipedia.org/wiki/PhpBB)*, chegará ao seu fin.

Coa chegada de *[Wordpress](https://es.wikipedia.org/wiki/WordPress)* (2003), *[Joomla](https://es.wikipedia.org/wiki/Joomla)* (2005), etc...   a web sufrirá nos anos sucesivos un cambio drástico.

Os proxectos dividiranse naqueles que poidan ser realizados con un *[CMS](https://es.wikipedia.org/wiki/Sistema_de_gesti%C3%B3n_de_contenidos)* (principalmente en PHP) e outros que necesitarán dun traballo a medida.

O mítico Netscape despídese pra sempre coa versión 9 e nace Firefox.

Termina 2007 con 1.500 millóns de usuarios en Internet.

{icon=history}
G> #### Web Archive:
G>
G> - *[Amazon en 2000](http://web.archive.org/web/20000229081105/http://www.amazon.com/exec/obidos/subst/home/home.html)*
G> - *[Google en 2000](http://web.archive.org/web/20001027222150/http://www.google.com/)*
G> - *[Google en 2005](http://web.archive.org/web/20051114081503/http://www.google.com)*
G> - *[Facebook en 2005 (AboutFace)](http://web.archive.org/web/20050213040632/http://facebook.com/)*
G> - *[Facebook en 2005](http://web.archive.org/web/20051020000116/http://www.facebook.com)*
G> - *[Amazon en 2005](http://web.archive.org/web/20051126094753/http://www.amazon.com/exec/obidos/subst/home/home.html)*
G> - *[Youtube en 2005](http://web.archive.org/web/20050428014715/http://www.youtube.com/)*


### 2008 en adiante...

Comeza unha nova era... o nativo vai pouco a pouco desterrando as solucións arcaicas e obsoletas como Applets, Flash, ActiveX...

HTML5 y CSS3 dan o empuxón que facía falta pra que a web despegara. *[Chrome](https://es.wikipedia.org/wiki/Google_Chrome)* nace xusto aproveitando estes cambios de paradigma.

Todo aquelo que podía facerse con Flash, agora poderá facerse mellor e máis rápido de maneira nativa xuntando as tres forzas máis impoñentes da web, CSS3, HTML5 y JavaScript.

Ábrese o desenvolvemento hacia unha web moito máis *[semántica](https://es.wikipedia.org/wiki/Web_sem%C3%A1ntica)* coas *[filosofías responsive](https://es.wikipedia.org/wiki/Dise%C3%B1o_web_adaptable)*, e comeza a época de "Internet na palma da man" cos *[smartphones](https://es.wikipedia.org/wiki/Tel%C3%A9fono_inteligente)*.

A popularidade e capacidade da nova Internet ocasionarán un cambio de paradigma que trastornará todo. Pouco a pouco, as aplicacións de escritorio serán substitutas por aplicacións web, ocasionando una migración masiva de desenvolventes hacia o trio da web (HTML, CSS y JavaScript).

A lo longo dos anos seguintes, serán moitas as empresas que decidan dar soporte a JavaScript nos seus produtos pra asegurarse acceder a unha masa crítica de desenvolventes, este é o caso dos *[scripts para Photoshop](http://www.adobe.com/devnet/photoshop/scripting.html)*, *[Unity](https://unity3d.com/es/learn/tutorials/topics/scripting/c-vs-js-syntax)*, etc...

Tamén veremos que a complexidade de conseguir desenvolventes de APPs Nativas (*[Java](https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n))*, *[Swift](https://es.wikipedia.org/wiki/Swift_(lenguaje_de_programaci%C3%B3n))* y *[Objetive-c](https://es.wikipedia.org/wiki/Objective-C)*) forzará a que cheguen os sistemas híbridos, onde JavaScript, HTML y CSS serán todo o coñecemento necesario pra entrar no mundo dos smartphones, gracias a solucións como *[PhoneGap](https://es.wikipedia.org/wiki/PhoneGap)*.

A febre por estender JavaScript, irá moito máis alá do imaxinado e atopara en *[Node.js](https://es.wikipedia.org/wiki/Node.js)* a peza que faltaba para encaixar en certos entornos como as *[aplicacións de escritorio](http://electron.atom.io/)*, ou a xestión de redes.

Todo elo, permite que JavaScript deixe de ser unha linguaxe exclusiva da web pra ir moito máis alá, meténdose incluso en el desenvolvemento de *[Internet of Things (IoT)](https://es.wikipedia.org/wiki/Internet_de_las_cosas)* e a *[Robótica](https://es.wikipedia.org/wiki/Rob%C3%B3tica)* con librerías como *[Cyclon.js](https://cylonjs.com/)*, *[J5](http://johnny-five.io/)*, etc...

Internet de *[alta velocidade](https://es.wikipedia.org/wiki/L%C3%ADnea_de_abonado_digital_asim%C3%A9trica)* e a *[fibra óptica](https://es.wikipedia.org/wiki/Fibra_%C3%B3ptica)* supuxeron unha gran mellora nas comunicacións, o que axudou a crear una Internet moito máis rica en contido. En 2011 xa se manexaban 27.483 PB/mes, fronte aos 10.000 PB/mes de 2007. A loxística e as telecomunicacións xogarán un papel moi importante no futuro desenvolvemento do noso planeta.


{icon=history}
G> #### Web Archive:
G>
G> - *[Google en 2010](http://web.archive.org/web/20101130235215/http://www.google.com/)*
G> - *[Google en 2015](http://web.archive.org/web/20151215000203/http://www.google.com/)*
G> - *[Amazon en 2010](http://web.archive.org/web/20101126032341/http://www.amazon.com/)*
G> - *[Amazon en 2015](http://web.archive.org/web/20151127000839/http://www.amazon.com/)*
G> - *[Youtube en 2010](http://web.archive.org/web/20100914234459/http://www.youtube.com/)*
G> - *[Youtube en 2015](http://web.archive.org/web/20151115000036/https://www.youtube.com/)*
G> - *[Facebook en 2010](http://web.archive.org/web/20100110004754/http://www.facebook.com/)*
G> - *[Facebook en 2015](http://web.archive.org/web/20150731235552/https://facebook.com/)*


## O longo camiño do Desenvolvente

Este esquemático *[mapa mental](https://coggle.it/diagram/WF5nS6mGe9w7iwoZ)*, pode axudalos a visualizar o que esta ocorrendo hoxe en día na web, e comprender como os profesionais da industria, fomos migrando de nomes e funcións ata onde estamos agora mesmo, que non é definitivo e loxicamente seguirá evolucionando.

### Unha historia de evolución

Moi lonxe quedan os tempos nos que ser *[Webmaster](https://es.wikipedia.org/wiki/Webmaster)* era suficiente pra xestionar todo o que tiña que ver coa web, dende programación a xestión dos usuarios, pasando polo primitivo Marketing da época.

A web foi evolucionando rapidamente a nivel de desenvolvemento, aquel *webmaster* multiusos, pasou a dividirse en dous grandes e moi diferenciados roles:

Deseño

: Encargado de facer os deseños básicos con algún programa da *[suit de Adobe](https://es.wikipedia.org/wiki/Adobe_Creative_Suite)* ou similar.

: En ocasións tamén encargábase da parte de Flash, pra crear animacións y transicións.


Programación

: Realizaba tódalas tarefas de desenvolvemento: JavaScript, PHP, Bases de datos, formularios, *[hosting](https://es.wikipedia.org/wiki/Alojamiento_web)*, etc... As webs daquela época non eran moi complexas, gran parte da lóxica facíase no servidor e o verdadeiro reto era lograr os obxectivos coa tecnoloxía da época.

Aqueles eran os vellos tempos... era como construír os primeiros avións. Materiais como a tela ou a madeira servían pra construír todo o entrañado do fuselaxe, un motor potente, uns controles sinxelos e xa estabas voando.


A medida que a web foi evolucionando, a súa complexidade tamén creceu exponencialmente, e como consecuencia inmediata, a programación dividiuse en dúas grandes áreas.

Deseñador/Maquetador

: Antes co deseño era suficiente. Pero pouco a pouco, o deseñador vai asumindo competencias básicas, pra descargar de traballo meramente estático aos desenvolventes, que centraríanse en facer a parte menos visual.

: Agora o deseñador tomará a iniciativa e converterá os deseños en HTML y CSS.


Front-End Desenvolvente

: Algúns desenvolventes, deciden que asumirán as funcións de interacción do lado do cliente (JavaScript) e deixando o servidor. En moitas ocasións, o deseño quedará fora das súas competencias.

: A medida que JavaScript deixou de usarse so pra interpretación e comezou a ganar forza fronte ao renderizado total de datos no servidor, migrarase de JQuery ata JavaScript nativo e as librerías MV* como Angular, Backbone, Ember...


Back-End Desenvolvente

: O desenvolvemento no servidor tamén sufrirá moitos cambios. Pouco a pouco, migrarase de proxectos web que basean a maior parte da súa programación no renderizado de HTML, CSS e JavaScript, dende o servidor a creación de *[APIs](https://es.wikipedia.org/wiki/Interfaz_de_programaci%C3%B3n_de_aplicaciones)*, onde prima o illamento do procesamento da información.

: En canto a linguaxes de programación, pouco a pouco irase vendo que máis e máis sistemas e linguaxes esforzáranse por entrar no mundo de internet con novas librerías e arquitecturas. *[Apache](https://es.wikipedia.org/wiki/Servidor_HTTP_Apache)* logra facer de ponte para moitos, pero a larga xurdirán alternativas.

: Mentres tanto, moitas iniciativas asaltan a web con ideas innovadoras como *[desenvolvemento áxil](https://es.wikipedia.org/wiki/Desarrollo_%C3%A1gil_de_software)*, *[eXtreme Programming (XP)](https://es.wikipedia.org/wiki/Programaci%C3%B3n_extrema)*.

: O *[software libre](https://es.wikipedia.org/wiki/Software_libre)* acabou transformándose no standard dentro do sector grazas ao *[mítico LAMP](https://es.wikipedia.org/wiki/LAMP)*.

: As bases de datos tamén evolucionarán e teremos que convivir con dúas maneiras de entendelo almacenaxe, *[SQL](https://es.wikipedia.org/wiki/SQL)* y *[NoSQL](https://es.wikipedia.org/wiki/NoSQL)*. O que suporá unha dificultade engadida pra o desenvolvemento de novos proxectos.

: Outras áreas como a *[intelixencia artificial](https://es.wikipedia.org/wiki/Inteligencia_artificial)* e *[Big data](https://es.wikipedia.org/wiki/Big_data)* irán pouco a pouco demandando o seu oco, polo que dentro do backend iremos vendo novas áreas de especialización.


Full Stack Developer

: Xurde unha nova clase de desenvolventes, que por avatares do destino non se distribúen no *back* ou no *front*.

: E serán capaces de adentrarse en ámbolos mundos e suplir as necesidades dos equipos nestes dous frontes. Cada Full Stack Developer será diferente, cada un será especialista nunhas areas, e en outras pasará de longo.


Manterse ao día na industria é cada vez máis difícil. En cuestión duns poucos anos pasamos de construír aqueles avións básicos con tela e madeira a desenvolver foguetes capaces de *[rexistrar unha galaxia](https://twitter.com/CodingCarlos/status/812977512296906752)*.

A nosa industria viuse totalmente superada. O crecemento de Internet non era ni de lonxe acorde a cantidade de profesións capaces de suplir esta demanda. Isto creou un *efecto chamada* que desatou a chegada de moitos novos desenvolventes, que non senten esta profesión con a paixón de aqueles que comezamos a construír un Internet mellor, nos realmente críamos no que facíamos e como o facíamos.

A asimilación de desenvolventes obsoletos doutras áreas e alleos a industria, condicionará moito a maneira de traballar, especialmente con JavaScript.

Basicamente podería dicirse que esta industria divídese entre artesáns e mercenarios.


### Unha realidade caótica.

A medida que isto crece, as barreiras pra entrar na industria o cambiar de rol dentro dela, aumentan.

Para facernos unha lixeira idea do que necesitamos saber nas diversas áreas, déixovos este *[esquema](https://coggle.it/diagram/WF5nS6mGe9w7iwoZ)*.

**Cousas que todos deberíamos saber**

- Manexo de Git/Github.
- Entender como funciona HTTP e as APIs.
- Manexo básico de terminal/consola.
- Traballar con FTP.
- Manexo de SSH.

{pagebreak}

**¿Que se espera dun Front-End Junior?**

- Coñecemento bo de HTML5.
- Coñecemento bo de CSS3.
- Bases de testing.
- Chamadas AJAX.
- Traballo con librerías como JQuery.
- Coñecementos básicos dalgunha librería MV*.

**¿Que se espera dun Front-End Senior?**

- O mesmo que dun Junior, pero en maior profundidade e con experiencia.
- Xestión de tarefas  *[Gulp](http://gulpjs.com/)*, *[Grunt](http://gruntjs.com/)*, etc...).
- *[Preprocesadores CSS](https://abalozz.es/que-es-un-preprocesador-de-css/)*.
- Traballo con *[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)*.
- Dominio do desenvolvemento Responsive.
- Xestión de dependencias  *[RequireJS](http://requirejs.org/)*, *[Webpack](https://webpack.github.io/)*, *[Browsefy](http://browserify.org/)*, etc..).
- Dominio/manexo fluído dun framework MV*.
- Coñecementos de Node.js.
- Coñecementos moi sólidos de JavaScript  *[Patróns de deseño](https://es.wikipedia.org/wiki/Patr%C3%B3n_de_dise%C3%B1o)*, ES6, etc..).
- Coñecementos avanzados sobre HTML5 APIs.
- Boas prácticas (documentación, *[refactorización](https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n)*, etc...).


**¿Que se espera dun Back-End Junior?**

- Coñecementos sólidos de programación (Algorítmia, lóxica, etc...).
- Saber traballar con bases de datos relacionais e non relacionais.
- Bases dunha boa arquitectura (modularidade, *[microservizos](https://www.genbetadev.com/paradigmas-de-programacion/trabajar-con-microservicios-evitando-la-frustracion-de-las-enormes-aplicaciones-monoliticas)*, etc...).
- Bases de novas arquitecturas  *[NoBackend](http://nobackend.org/)*, *[Serverless](https://en.wikipedia.org/wiki/Serverless_computing)*, *[WebSockets](https://es.wikipedia.org/wiki/WebSocket)*, etc...).
- Desenvolvemento de aplicacións seguras.
- Coñecementos de protocolos como *[OAuth](https://es.wikipedia.org/wiki/OAuth)*, HTTP (server side), etc..
- Polo menos unha linguaxe de programación cun bo nivel.
- Traballar con fluidez cun motor de modelo.
- Bases de HTML5 e CSS3.



**¿Que se espera de un Back-End Senior?**

- O mesmo que dun Junior, pero en maior profundidade e con experiencia.
- Espallar Servidores e servizos na nube.
- Polo menos dúas linguaxes de programación de Backend.
- Bo nivel de JavaScript.
- Bases de Node.js pra a automatización  *[Yeoman](http://yeoman.io/)*, *[Gulp](http://gulpjs.com/)*, etc..).
- Bases da Integración continua  *[Jenkins](https://jenkins.io/)*, *[TravisCI](https://travis-ci.org/)*, etc...).
- Experiencia con varias bases de datos diferentes.
- Xestión de cacheo  *[Nginx](https://www.nginx.com/)*, etc...).
- Creación de APIs.
- Integración con outras plataformas e servizos.
- *[Shell Scripting](https://en.wikipedia.org/wiki/Shell_script)*.




### No centro do furacán: JavaScript

{icon=coffee}
G> #### Lecturas recomendadas:
G>
G> - *[The Deep Roots of Javascript Fatigue by Calvin French-Owen](https://segment.com/blog/the-deep-roots-of-js-fatigue/)*
G> - *[O estado do desenvolvemento Front-End no 2015 por Ashley Nolan](http://ashleynolan.co.uk/blog/frontend-tooling-survey-2015-results)*
G> - *[How it feels to learn JavaScript in 2016 by Jose Aguinaga](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.3zltfkmkn)*
G> - *[State of js](http://stateofjs.com/)*
G> - *[How to avoid JavaScript fatigue and sleep well at night by Josh Mock](https://www.youtube.com/watch?v=T8Qb2fVE0rU&feature=player_embedded)*
G> - *[The Magpie Developer](http://blog.codinghorror.com/the-magpie-developer/)*
G> - *[The Sad State of Web Development](https://medium.com/@wob/the-sad-state-of-web-development-1603a861d29f#.62up3vtl1)*
G> - *[A response to The Sad State of Web Development — Its not about Javascript really](https://www.reddit.com/r/programming/comments/40rwrk/a_response_to_the_sad_state_of_web_development/)*
G> - *[How one developer just broke Node, Babel and thousands of projects in 11 lines of JavaScript](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)*
G> - *[Is left-pad Indicative of a Fragile JavaScript Ecosystem?](http://developer.telerik.com/featured/left-pad-indicative-fragile-javascript-ecosystem/)*
G> - *[Overcoming JavaScript Fatigue](http://developer.telerik.com/topics/web-development/overcoming-javascript-fatigue/)*
G> - *[¿E se o software Open Source desaparecerá?](http://www.xataka.com/servicios/y-si-el-software-open-source-desapareciera)*

Pra os desenvolventes de JavaScript, todo foi complicado, xa que o crecemento exponencial das necesidades de todo Internet pasaron por esta linguaxe.

Ao ser a única linguaxe que se pode executar no navegador, moitos desenvolventes tiveron que pasar polo aro e aprendelo.

Outros moitos, tiveron que crear librerías e frameworks pra intentar facelo máis sinxelo e áxil.

Estes e máis factores, fixeron que cheguemos a un punto de non retorno que oficialmente coñecese como *[JavaScript Fatigue](https://twitter.com/search?q=jsfatigue&src=typd)*.

![Imaxe de CommitStrip.com](images/js_frameworks_commitstrip.jpg)


Durante estes anos *[JavaScript faise adulto](https://www.youtube.com/watch?v=ztspvPYybIY)* de da man de *[Ryan Dahl](https://www.linkedin.com/in/ryan-dahl-a30235b4/)* cando liberase *[Nodejs](https://nodejs.org/en/)*.

Node.js supón un antes e un despois en toda a industria. No so para os desenvolventes de JavaScript, xa que Node.js non é unicamente un entorno pra desenvolver *[servidores de internet clásicos (Http)](https://es.wikipedia.org/wiki/Servidor_web)*. Xa que o seu forte está nos novos paradigmas que manexa.

Cousas como a asincronía, a orientación a eventos e o paralelismo... convérteno rapidamente nun dos entornos de desenvolvemento más rápido.

Que fora multiplataforma, basearáse no *[motor V8 de Google](https://developers.google.com/v8/)* e incluirá un xestor de paquetes tan evolucionado como *[NPM](https://www.npmjs.com/)*, fan de Node.js una ferramenta ideal para facer cousas tan diversas como aplicacións de rede, automatización de tarefas, etc...

I> #### *[IO.js](https://iojs.org/es/)*
I>
I> E non tardaron moito en chegar os *[#jsDramas](https://twitter.
I> com/hashtag/jsDrama?src=hash)* cando a comunidade de Nodejs decide separarse en dous, *[IO
I> .JS](https://iojs.org/es/)* e Nodejs.
I>
I> Creando unha brecha que moitos consideraron insalvable. Ao final Node.js reabsorbe a IO.js
I> e acepta tódolos cambios e la evolución que se desexaba orixinalmente.
I>
I> *[Mais información...](http://www.genbetadev.com/actualidad/tiempos-turbulentos-para-la-
I> comunidad-node-js-ha-nacido-io-js)*

A súa vez, Node.js crea un peculiar efecto de absorción e fusionamento de roles entre el frontEnd e backEnd, xa que agora non existe una barreira de linguaxe real entre o back e o front. So e necesario aprender Node.js para entrar no mundo do back.

Como consecuencia créanse novos desenvolventes de JavaScript, aos que cada vez máis, se lles esixe coñecer e manexarse con Node.js.


## Revolución... ¡Revolución!

{icon=coffee}
G> #### Lecturas recomendadas:
G>
G> - *[History of Gnu, Linux, Free and Open Source Software (Revolution OS)](https://www.youtube.com/watch?v=sujZg7jwKdk)*
G> - *[Platform as a service (PaaS)](https://en.wikipedia.org/wiki/Platform_as_a_service)*
G> - *[Manifesto polo Desenvolvemento Áxil de Software](http://agilemanifesto.org/iso/es/)*


A lo longo destes anos, moitas cousas cambiaron no mundo do desenvolvemento do software.

Pra comezar creáronse novas maneiras de entender o entorno de desenvolvemento. Xa no so basta con crear o noso código e subilo ao servidor *[vía FTP](https://es.wikipedia.org/wiki/File_Transfer_Protocol)* sen máis.

![Imaxe de z2-environment](images/dev_test_prod.png)

Agora é importante seguir unha filosofía de desenvolvemento máis complexa, onde debemos usar un *[control de versións](https://es.wikipedia.org/wiki/Control_de_versiones)* como *[Git](https://git-scm.com/)*.


O noso entorno local xa non se conectará directamente ao servidor de produción pra subir os cambios nos proxectos, pasaremos primeiro polo entorno de testing, e unha vez saibamos que todo funciona como debería, será subido a produción.

As subidas a produción, deberán de ser frecuentes, xa non será necesario ter unha *[release](http://semver.org/lang/es/)* completa pra facer subidas a produción.

Entramos na era do desenvolvemento áxil, a *[programación extrema](https://es.wikipedia.org/wiki/Programaci%C3%B3n_extrema)* e a *[computación na nube](https://es.wikipedia.org/wiki/Computaci%C3%B3n_en_la_nube)*. O ter servidores físicos nos sotos da empresa, eliminarase a favor de sistemas como *[Google Cloud](https://cloud.google.com/)*, *[Amazon Web Services](https://aws.amazon.com/es/)*, *[Heroku](https://dashboard.heroku.com/)* ou outros provedores.

Todo será moito máis modular e escalable, todo estará moito máis interconectado, o *[login social](https://en.wikipedia.org/wiki/Social_login)* cambiará a maneira de autentificarnos.

Xa non reinventaremos a roda tan a miúdo e dependeremos moito máis de APIs e sistemas de terceiros.

O *[software libre](https://es.wikipedia.org/wiki/Software_libre)* deixou de soar a cousa rara.

A maior parte dos servidores de internet montarán *[distribucións Linux](https://es.wikipedia.org/wiki/Distribuci%C3%B3n_Linux)*. A colaboración entre desenvolventes de maneira altruísta baixo o sistema do software libre, creará algunhas das linguaxes, librerías e sistemas máis sólidos.

Esta idea de liberdade, estendese como a pólvora e da pe a estender estas filosofías a outras áreas como a cultura con licencias *[Creative Commons](https://es.wikipedia.org/wiki/Creative_Commons)* ou ao mundo do hardware co *[Hardware libre](https://es.wikipedia.org/wiki/Hardware_libre)*

Ao ter un entorno libre do que nutrirse moitos desenvolventes empezar a innovar. Rapidamente a comunidade ségueos, vanse constituíndo novos ciclos e formatos de innovación.

Algunhas empresas, pouco a pouco, verán este valor e migrarán dun modelo máis tradicional de software privativo a un máis aberto e libre.

Cambiarán moitas cousas, *[XML](https://es.wikipedia.org/wiki/Extensible_Markup_Language)* será destronado e *[JSON](https://es.wikipedia.org/wiki/JSON)* será novo rei. Idearanse novas maneiras de xestionar o tempo real como *[WebSockets](https://es.wikipedia.org/wiki/WebSocket)*.

Xurdirán iniciativas con ideas tan potentes como *[Nobackend](http://nobackend.org/)*, que plantearán novos paradigmas, pero sobretodo a innovación e a creatividade empuxarán sobre maneira -como nunca antes- o mundo do software.

{pagebreak}

Precisamente a innovación pasará a formar parte do ADN dos novos tipos de empresas como as *[Startups](https://es.wikipedia.org/wiki/Empresa_emergente)*. O *[MVP](https://es.wikipedia.org/wiki/Producto_viable_m%C3%ADnimo)* e o prototipado serán un concepto *[mainstream](https://es.wikipedia.org/wiki/Mainstream)* ao igual que a metodoloxía *[Lean Startup](https://es.wikipedia.org/wiki/Lean_startup)*.
