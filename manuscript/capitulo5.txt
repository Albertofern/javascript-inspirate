# Capítulo 5 - Bucles

{:: encoding="utf-8" /}
{footnotes-off}

En JavaScript existen diversos bucles que poderemos utilizar en función das necesidades do noso programa.

Agora veremos aqueles bucles que son de uso xenérico, pero existen variacións do bucle *for* específicas pra Arrays  *[forEach](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/forEach)*) e Obxectos  *[For... in](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/for...in)*) que veremos nos próximos capítulos.

Pra o caso que preocúpevos o rendemento dos vosos bucles déixovos *[este link](https://blogs.oracle.com/greimer/entry/best_way_to_code_a)* con uns *[benchmarks](https://es.wikipedia.org/wiki/Benchmark_(inform%C3%A1tica))* bastante interesantes.

## *[While](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)*

O primeiro bucle que veremos está especificamente deseñado pra funcionar de maneira constante, mentres unha condición dada siga cumpríndose.

Este bucle esta pensado pra simplificarnos a séntese cando o control del bucle non se realiza mediante operacións matemáticas (maior que... menor que...).

### Funcionamento

-  **Estrutura:**

    {lang=text}
    ~~~~~~~
    while (-Condición-) {
        -Instrucións-
    };
    ~~~~~~~

- **Ejemplo:**

    {lang=js}
    ~~~~~~~
    var condición = true
    while (condición) {
        console.log("ola");
        condición = false;
    };
    ~~~~~~~

## *[For](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)*

Este bucle presenta unha estrutura optimizada pra controlar a execución da iteración de maneira numérica.

O bucle *For* divídese en tres partes separadas por un punto e coma.

{pagebreak}

Expresión inicial

: Será todo aquelo que executárase ao iniciarse o bucle.


Condición

: Será avaliada antes de cada iteración. Este é o único parámetro obrigatorio.


Expresión de actualización

: Executárase ao final de cada iteración.


### Funcionamento

* Estrutura:

    {lang=text}
    ~~~~~~~
    for (-Expresión inicial-; -Condición-; -Expresión Actualización-) {
        -Instrucións-
    };
    ~~~~~~~

* Exemplo clásico:

    {lang=js}
    ~~~~~~~
    for (var i = 0; i < 10; i++) {
        console.log(i);
    }
    ~~~~~~~


## *[Do... While](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while)*

O terceiro bucle que veremos neste capítulo é *Do... While* que se diferencia de tódolos demais en que executase primeiro e evaluase despois.

Ao utilizar este bucle asegurámonos que anque a condición non se cumpra... o código executase ao menos unha vez.

### Funcionamento

* Estrutura:

    {lang=text}
    ~~~~~~~
    do{
       -Instrucións-
    } while (-Condición-);
    ~~~~~~~

{pagebreak}


* Exemplo:

    {lang=js}
    ~~~~~~~
    var i = 0;
    do {
       i++;
       console.log(i);
    } while (i < 10);
    ~~~~~~~

W> **Importante:**
W>
W> Ao menos executárase unha vez, anque a premisa non sexa verdadeira.

{lang=js}
~~~~~~~
do{
   console.warn("executome")
} while (false);
~~~~~~~

## *[Break](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/break)* e *[Continue](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/continue)*

W> **Dominando a eficiencia**
W>
W> Dúas sentencias chave en JavaScript, son *break* e *continue*, que permítennos romper ou alterar o fluxo normal da nosa aplicación.
W>
W> Poden utilizarse tamén coas estruturas condicionais que vimos no capítulo anterior.

- **Continue**

    Permítenos saltar parte do bucle.

    {lang=js}
    ~~~~~~~
    for (var i = 0; i < 10; i++) {

        // Salta o 5 e segue...
        if (i === 5) {
        	continue;
        }

        console.log("O valor de i é "+i);
    }
    ~~~~~~~

{pagebreak}

- **Break**

    Permítenos saír do bucle.

    {lang=js}
    ~~~~~~~
    for (var i = 0; i < 10; i++) {

        // Chega a 5 e sae.
        if (i === 5) {
        	break;
        }

        console.log("O valor de i é "+i);
    }
    ~~~~~~~


## Erros comúns

### Bucle infinito

É un erro moi común e deberías evitalo a toda costa. Soe ocorrer cando non temos unha estrutura de control funcionando adecuadamente.

{lang=js}
~~~~~~~
while (true) {
    console.log("Este texto imprímese ata o infinito...");
};
~~~~~~~


### Bucle que non se executará

Igualmente é un erro máis sutil, pero por definición **un código que xamais se executa... ¡sobra!**

{lang=js}
~~~~~~~
while (false) {
    console.log("Este texto xamais imprimírase...");
};
~~~~~~~

Exemplo:

{lang=js}
~~~~~~~
var control = 1;
while (control <= 10) {
    console.log(control);
    control++;
};
~~~~~~~


{pagebreak}


## Usos Avanzados

### Decrecemento:

E bastante común utilizar este tipo de bucles, cando estamos traballando sobre a representación dinámica de elementos no DOM.

{lang=js}
~~~~~~~
for (var i = 10; i > 0; i--) {
    console.log(i);
}
~~~~~~~

### Anidación:

Anque resulta moi tentador... debemos de evitar na medida do posible a anidación en JavaScript. Por regra xeral anidar ata dous ou tres niveis é aceptable.

{lang=js}
~~~~~~~
for (var i = 0; i < 10; i++) {
    console.log("Estou no primeiro bucle.");
    for (var j = 10; j > 0; j--) {
        console.log("Estou no segundo bucle")
        console.log("Volta: " + i + " - " + j);
    }

}
~~~~~~~


### Espremendo o For

Se dominamos as tres partes básicas que compoñen o bucle *for*, podemos plantexarnos estruturas tan complexas como esta.

{lang=js}
~~~~~~~
for (var i = 0, x = 1, z = 2, tope = 10; i <= tope; x *= z, i++ ) {
    console.log("i vale "+i+", x vale "+x+", z vale "+z);
}
~~~~~~~

T> Polo xeral a *variable i* soe reservarse pra controlar as iteracións do bucle, anque
T> podamos utilizar outros nomes... isto soe estar moi aceptado pola comunidade e considerase
T> unha boa práctica.

{pagebreak}


### Non refactorizar

En ocasións, o código evoluciona e non repasamos o que construímos previamente... chegando a situacións tan monstruosas como esta.

* Antes de refactorizar:

    {lang=js}
    ~~~~~~~
    // Código
    for (;i === true;) {
        // Máis Código
    }
    ~~~~~~~



* Despois de refactorizar:

    {lang=js}
    ~~~~~~~
    // Código
    while (i) {
        // Máis Código
    }
    ~~~~~~~
